using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace SelfishSourceGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class SystemReactCommandsGenerator : IIncrementalGenerator
    {
        private const string SYSTEM_INTERFACE = "ISystem";
        private const string REACT_LOCAL_COMMAND_INTERFACE = "IReactLocal";
        private const string REACT_GLOBAL_COMMAND_INTERFACE = "IReactGlobal";
        
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var pipeline = context.SyntaxProvider
                .CreateSyntaxProvider(
                    static (s,_) => Common.IsNotAbstractClass(s),
                    static (c, _) => Common.GetClassSymbol(c))
                .Where(a => a != null)
                .Select((symbol, token) =>
                {
                    token.ThrowIfCancellationRequested();

                    if (!symbol.IsImplementingInterface(SYSTEM_INTERFACE))
                    {
                        return null;
                    }

                    string[] localCommands = Array.Empty<string>();
                    string[] globalCommands = Array.Empty<string>();
                    if (symbol.IsImplementingInterface(REACT_LOCAL_COMMAND_INTERFACE))
                    {
                        localCommands = symbol.AllInterfaces
                            .Where(i => i.Name == REACT_LOCAL_COMMAND_INTERFACE && i.IsGenericType)
                            .Select(i => i.TypeArguments.First())
                            .OfType<INamedTypeSymbol>()
                            .Select(t => t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))
                            .ToArray();
                    }
                    
                    if (symbol.IsImplementingInterface(REACT_GLOBAL_COMMAND_INTERFACE))
                    {
                        globalCommands = symbol.AllInterfaces
                            .Where(i => i.Name == REACT_GLOBAL_COMMAND_INTERFACE && i.IsGenericType)
                            .Select(i => i.TypeArguments.First())
                            .OfType<INamedTypeSymbol>()
                            .Select(t => t.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))
                            .ToArray();
                    }

                    return new
                    {
                        ClassSymbol = symbol,
                        LocalCommands = localCommands,
                        GlobalCommands = globalCommands,
                    };
                })
                .Where(a => a != null);
            context.RegisterSourceOutput(pipeline, (productionContext, source) => GenerateLocalCommandListener(productionContext, source.ClassSymbol, source.LocalCommands, source.GlobalCommands));
        }


        private static void GenerateLocalCommandListener(SourceProductionContext context, INamedTypeSymbol classSymbol, string[] localCommands, string[] globalCommands)
        {
            var namespaceName = Common.GetNamespaceName(classSymbol);
            var registerMethod = new StringBuilder();
            registerMethod.AppendLine("    public override void RegisterCommands()");
            registerMethod.AppendLine("    {");
            foreach (var command in localCommands)
                registerMethod.AppendLine($"        Owner.GetWorld().ModuleRegistry.GetModule<LocalCommandModule>().Register<{command}>(Owner, this);");
            foreach (var command in globalCommands)
            {
                registerMethod.AppendLine($"        Owner.GetWorld().ModuleRegistry.GetModule<GlobalCommandModule>().Register<{command}>(this);");
            }
            registerMethod.AppendLine("    }");
            
            var unregisterMethod = new StringBuilder();
            unregisterMethod.AppendLine("    public override void UnregisterCommands()");
            unregisterMethod.AppendLine("    {");
            foreach (var command in localCommands)
                unregisterMethod.AppendLine($"        Owner.GetWorld().ModuleRegistry.GetModule<LocalCommandModule>().Unregister<{command}>(Owner, this);");
            foreach (var command in globalCommands)
            {
                unregisterMethod.AppendLine($"        Owner.GetWorld().ModuleRegistry.GetModule<GlobalCommandModule>().Unregister<{command}>(this);");
            }
            unregisterMethod.AppendLine("    }");
            
            var code = $@"
// <auto-generated/>
#pragma warning disable
#nullable enable
using SelfishFramework.Src.Core;
using SelfishFramework.Src.Core.SystemModules.CommandBusModule;


{namespaceName}
{{
    public partial class {classSymbol.Name}
    {{
    {registerMethod}

    {unregisterMethod}
    }}
}}
    ";
            var className = classSymbol.Name;
            context.AddSource($"{className}_commands.g.cs", code);
        }
    }
}