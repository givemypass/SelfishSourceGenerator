using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace SelfishSourceGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class InjectGenerator : IIncrementalGenerator
    {
        private const string INJECTABLE_ATTRIBUTE_NAME = "SelfishFramework.Src.Core.Attributes.InjectableAttribute";
        private const string INJECT_ATTRIBUTE_NAME = "SelfishFramework.Src.Core.Attributes.InjectAttribute";
        private const string IINJECTABLE_INTERFACE_NAME = "SelfishFramework.Src.Core.Dependency.IInjectable";
        
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var pipeline = context.SyntaxProvider
                .CreateSyntaxProvider(
                    static (s, _) => Common.IsNotAbstractClass(s),
                    static (c, _) => Common.GetClassSymbol(c))
                .Where(a => a != null)
                .Select((symbol, token) =>
                {
                    token.ThrowIfCancellationRequested();
                    
                    var injectableAttribute = symbol.GetAttributes()
                        .FirstOrDefault(attr => attr.AttributeClass?.ToDisplayString() == INJECTABLE_ATTRIBUTE_NAME);

                    if (injectableAttribute == null)
                        return null;

                    var injectFields = symbol.GetMembers()
                        .OfType<IFieldSymbol>()
                        .Where(field => field.GetAttributes()
                            .Any(attr => attr.AttributeClass?.ToDisplayString() == INJECT_ATTRIBUTE_NAME))
                        .Select(field => (field.Name, field.Type))
                        .ToList();

                    return new
                    {
                        ClassName = symbol,
                        InjectFields = injectFields,
                    }; 
                })
                .Where(a => a != null);
            
            context.RegisterSourceOutput(pipeline,
                (productionContext, source) => Process(productionContext, source.ClassName, source.InjectFields));
        }
        
        private static void Process(SourceProductionContext productionContext, INamedTypeSymbol classSymbol,
            List<(string, ITypeSymbol)> fields)
        {
            var namespaceName = Common.GetNamespaceName(classSymbol);

            var componentMethodBody = new StringBuilder();
            componentMethodBody.AppendLine("    public void ResolveDependencies(DependencyContainer container)");
            componentMethodBody.AppendLine("    {");
            foreach (var field in fields)
            {
                var typeName =
                    ((INamedTypeSymbol)field.Item2).ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                componentMethodBody.AppendLine($"        {field.Item1} = container.Get<{typeName}>();");
            }

            componentMethodBody.AppendLine("    }");

            var code = $@"
// <auto-generated/>
#pragma warning disable
#nullable enable
using SelfishFramework.Src.Core;
using SelfishFramework.Src.Core.Dependency;

{namespaceName}
{{
    public partial class {classSymbol.Name} : {IINJECTABLE_INTERFACE_NAME}
    {{
    {componentMethodBody}
    }}
}}
    ";
            var className = classSymbol.Name;
            productionContext.AddSource($"{className}_injection.g.cs", code);
        }
    }
}