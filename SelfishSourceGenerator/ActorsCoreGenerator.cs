using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;

namespace SelfishSourceGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class ActorsCoreGenerator : IIncrementalGenerator
    {
        private const string ACTOR_TYPE_NAME = "Actor";
        private const string COMPONENT_INTERFACE = "IComponent";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var pipeline = context.SyntaxProvider
                .CreateSyntaxProvider(
                    static (s,_) => Common.IsNotAbstractClass(s),
                    static (c, _) => Common.GetClassSymbol(c))
                .Where(a => a != null)
                .Select((syntaxContext, token) =>
                {
                    token.ThrowIfCancellationRequested();

                    if (!syntaxContext.BaseType.IsDerivedFrom(ACTOR_TYPE_NAME))
                    {
                        return null;
                    }

                    var componentFields = new List<string>();
                    foreach (var member in syntaxContext.GetMembers())
                        if (member is IFieldSymbol fieldSymbol)
                        {
                            if (fieldSymbol.Type.IsImplementingInterface(COMPONENT_INTERFACE))
                                componentFields.Add(fieldSymbol.Name);
                        }

                    return new
                    {
                        ClassSymbol = syntaxContext,
                        ComponentFields = componentFields,
                    };
                })
                .Where(a => a != null);

            context.RegisterSourceOutput(pipeline,
                (productionContext, source) => Process(productionContext, source.ClassSymbol, source.ComponentFields));
        }

        private static void Process(SourceProductionContext productionContext, INamedTypeSymbol classSymbol,
            List<string> componentFields)
        {
            var namespaceName = Common.GetNamespaceName(classSymbol);

            var componentMethodBody = new StringBuilder();
            componentMethodBody.AppendLine("    protected override void SetComponents()");
            componentMethodBody.AppendLine("    {");
            componentMethodBody.AppendLine("        base.SetComponents();");
            foreach (var field in componentFields)
                componentMethodBody.AppendLine($"        Entity.Set({field});");
            componentMethodBody.AppendLine("    }");

            var code = $@"
// <auto-generated/>
#pragma warning disable
#nullable enable
using SelfishFramework.Src.Core;

{namespaceName}
{{
    public partial class {classSymbol.Name}
    {{
    {componentMethodBody}
    }}
}}
    ";
            var className = classSymbol.Name;
            productionContext.AddSource($"{className}.g.cs", code);
        }
    }
}