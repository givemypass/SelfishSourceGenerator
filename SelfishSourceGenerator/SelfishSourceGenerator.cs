using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SelfishSourceGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class SelfishSourceGenerator : IIncrementalGenerator
    {
        private const string ACTOR_TYPE_NAME = "Actor";
        private const string COMPONENT_INTERFACE = "IComponent";
        private const string SYSTEM_INTERFACE = "ISystem";

        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var actorPipeline = context.SyntaxProvider
                .CreateSyntaxProvider(IsClass, GetClassSymbol)
                .Where(a => a != null)
                .Select((syntaxContext, token) =>
                {
                    token.ThrowIfCancellationRequested();

                    if (!syntaxContext.BaseType.IsDerivedFrom(ACTOR_TYPE_NAME))
                    {
                        return null;
                    }

                    var componentFields = new List<string>();
                    foreach (var member in syntaxContext.GetMembers())
                        if (member is IFieldSymbol fieldSymbol)
                        {
                            if (fieldSymbol.Type.IsImplementingInterface(COMPONENT_INTERFACE))
                                componentFields.Add(fieldSymbol.Name);
                        }

                    if (componentFields.Count > 0)
                        return new
                        {
                            ClassSymbol = syntaxContext,
                            ComponentFields = componentFields,
                        };
                    return null;
                })
                .Where(a => a != null);

            context.RegisterSourceOutput(actorPipeline,
                (productionContext, source) => ProcessActor(productionContext, source.ClassSymbol, source.ComponentFields));
        }

        private static void ProcessActor(SourceProductionContext productionContext, INamedTypeSymbol classSymbol,
            List<string> componentFields)
        {
            var namespaceName = classSymbol.ContainingNamespace.IsGlobalNamespace
                ? string.Empty
                : $"namespace {classSymbol.ContainingNamespace.ToDisplayString()}";

            var componentMethodBody = new StringBuilder();
            if (componentFields.Count > 0)
            {
                componentMethodBody.AppendLine("    protected override void SetComponents()");
                componentMethodBody.AppendLine("    {");
                foreach (var field in componentFields)
                    componentMethodBody.AppendLine($"        Entity.Set({field});");
                componentMethodBody.AppendLine("    }");
            }

            // Собираем весь код
            var code = $@"
// <auto-generated/>
#pragma warning disable
#nullable enable
using SelfishFramework.Src.Core;

{namespaceName}
{{
    public partial class {classSymbol.Name}
    {{
    {componentMethodBody}
    }}
}}
    ";
            var className = classSymbol.Name;
            productionContext.AddSource($"{className}.g.cs", code);
        }


        private static INamedTypeSymbol GetClassSymbol(GeneratorSyntaxContext context, CancellationToken token)
        {
            var candidate = Unsafe.As<ClassDeclarationSyntax>(context.Node);
            return context.SemanticModel.GetDeclaredSymbol(candidate) as INamedTypeSymbol;
        }

        private static bool IsClass(SyntaxNode node, CancellationToken token)
        {
            return node is ClassDeclarationSyntax;
        }
    }
}